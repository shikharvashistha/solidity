#!/usr/bin/env bash

# Bash script to test the asm-json-import input mode of the compiler by
# first exporting a .sol file to JSON that containing assembly json and corresponding bytecode,
# then the compiler is invoked in assembly json import mode `--import-asm-json` and uses the previously
# generated assembly json as input, where the corresponding bytecode output will be stored.
# Finally, the originally generated bytecode will be compared with the one that was generated by using the
# assembly json file as input.

set -eo pipefail
READLINK=readlink
if [[ "$OSTYPE" == "darwin"* ]]; then
    READLINK=greadlink
fi
REPO_ROOT=$(${READLINK} -f "$(dirname "$0")"/..)
# shellcheck source=scripts/common_import.sh
source "${REPO_ROOT}/scripts/common_import.sh"

SEMANTICTESTS_DIR="${REPO_ROOT}/test/libsolidity/semanticTests"
NSOURCES="$(find "$SEMANTICTESTS_DIR" -type f | wc -l)"

init_import_tests

# function tests whether importing an assembly json file creates identical bytecode.
# Results are recorded by adding to FAILED or UNCOMPILABLE.
# Also, in case of a mismatch a diff and the respective ASTs are printed
# Expected parameters:
# $1 name of the file to be exported and imported
# $2 any files needed to do so that might be in parent directories
function testImportExportEquivalence {
    local nth_input_file="$1"
    IFS=" " read -r -a all_input_files <<< "$2"

    if $SOLC "$nth_input_file" "${all_input_files[@]}" > /dev/null 2>&1
    then
        # save exported json as expected result (silently)
        $SOLC --combined-json asm,bin,compact-format --pretty-json "$nth_input_file" "${all_input_files[@]}" > expected.json 2> /dev/null
        for contract in $(jq '.contracts | keys | .[]' expected.json  2> /dev/null)
        do
            jq ".contracts.${contract}.asm" expected.json > asm.json 2> /dev/null
            jq --raw-output ".contracts.${contract}.bin" expected.json > expected.bin 2> /dev/null
            expected_bin=$(cat expected.bin)
            if [[ $expected_bin == "" ]]
            then
              continue
            fi

            if ! "$SOLC" --import-asm-json asm.json --bin > obtained.bin 2> /dev/null
            then
                # For investigating, use exit 1 here so the script stops at the
                # first failing test
                # exit 1
                echo ""
                echo "Failed with contract ${contract}."
                echo ""
                FAILED=$((FAILED + 1))
                return 1
            fi

            bin=$(tail -n +2 "obtained.bin" | grep -v '//')
            echo "$bin" > obtained.bin
            if ! diff expected.bin obtained.bin
            then
                echo ""
                echo "Failed with contract ${contract}."
                echo ""
                if [ "$DIFFVIEW" == "" ]
                then
                    echo "Expected:"
                    cat ./expected.bin
                    echo "Obtained:"
                    cat ./obtained.bin
                else
                    # Use user supplied diff view binary
                    $DIFFVIEW expected.bin obtained.bin
                fi
                FAILED=$((FAILED + 1))
                return 2
            fi
        done
        TESTED=$((TESTED + 1))
        rm -f expected.json asm.json expected.bin obtained.bin
    else
        # echo "contract $solfile could not be compiled "
        UNCOMPILABLE=$((UNCOMPILABLE + 1))
    fi
    # return 0
}
echo "Looking at $NSOURCES .sol files..."

TEST_FILES=$(find "$SEMANTICTESTS_DIR" -name "*.sol")
run_import_tests "$TEST_FILES" "$SPLITSOURCES" "$NSOURCES" "$PWD"
